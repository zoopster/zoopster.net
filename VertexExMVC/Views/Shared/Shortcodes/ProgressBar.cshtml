@model ExpressMVC.Models.Shortcodes.ProgressBarModel 

@{
    string colorClass = string.Empty;
    switch (Model.UIProps.Color)
    {
        case ExpressMVC.UI.ThemeColor.Primary:
            colorClass = "bg-primary";
            break;
        case ExpressMVC.UI.ThemeColor.Secondary:
            colorClass = "bg-secondary";
            break;
        case ExpressMVC.UI.ThemeColor.Tertiary:
            colorClass = "bg-tertiary";
            break;
        case ExpressMVC.UI.ThemeColor.Quaternary:
            colorClass = "bg-primary-2";
            break;
    }

    string sizeClass = string.Empty;
    switch (Model.UIProps.Size)
    {
        case ExpressMVC.UI.Size.Small:
            sizeClass = "progress-bar-small";
            break;
        case ExpressMVC.UI.Size.Default:
            sizeClass = string.Empty;
            break;
        case ExpressMVC.UI.Size.Large:
            sizeClass = "progress-bar-large";
            break;
    }
}

@if (Model.UIProps.IsLabelOutside)
{
    <div class="progress-bar-wrapper @Model.ClassName progress-bar-style-1 mb-3">
        <div class="progress-bar-info">
            <label class="@Model.Label.GetClassName()">@Model.Label</label>
            <span class="progress-bar-percent">@(Model.Value + "%")</span>
        </div>
        <div class="progress">
            <div class="progress-bar @(sizeClass) @(colorClass)" role="progressbar" data-to="@Model.Value" aria-valuenow="@Model.Value" aria-valuemin="0" aria-valuemax="100"></div>
        </div>
    </div>
}
else
{
    <div class="progress-bar-wrapper @Model.ClassName">
        <div class="progress mb-2">
            <div class="progress-bar @(sizeClass) @(colorClass)" role="progressbar" data-to="@Model.Value" aria-valuenow="@Model.Value" aria-valuemin="0" aria-valuemax="100">
                @if (Model.UIProps.ShowValue)
                {
                    @(Model.Value + "%")
                }
            </div>
        </div>
    </div>
}