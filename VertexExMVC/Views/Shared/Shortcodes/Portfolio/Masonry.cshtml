@model ExpressMVC.Models.Portfolio.PortfolioListModel
@using ExpressMVC.Models.Portfolio
@using PagedList.Mvc;
@using PagedList;

@{
    string showFilterClass = Model.UIProps.ShowFilter ? string.Empty : "d-none";
    var portfolioItems = Model.Items.ToPagedList(Model.PageNumber ?? 1, Model.PageSize);
}


<div class="clearfix">
    <div id="js-filters-masonry-projects" class="cbp-l-filters-buttonCenter">
        <div data-filter="*" class="cbp-filter-item-active cbp-filter-item">
            All <div class="cbp-filter-counter"></div>
        </div>
        @foreach (var item in Model.Categiries)
        {
            <div data-filter=".@("f" + item.Id)" class="cbp-filter-item">
                @item.Name <div class="cbp-filter-counter"></div>
            </div>
        }
    </div> 
</div>


<div id="js-grid-masonry-projects" class="cbp cbp-l-grid-masonry-projects">
    @foreach (var item in portfolioItems)
    {
        string categoryIds = String.Join(" ", item.Categiries.Select(s => "f" + s.Id));
        string categoryNames = String.Join(", ", item.Categiries.Select(s => s.Name));
        string url = Url.Action("Detail", "Portfolio", new { id = item.Id });

        <div class="cbp-item @categoryIds">
            <div class="cbp-caption">
                <div class="cbp-caption-defaultWrap">
                    <img src="@item.Src" alt="">
                </div>
                <div class="cbp-caption-activeWrap">
                    <div class="cbp-l-caption-alignCenter">
                        <div class="cbp-l-caption-body">
                            <a href="@url" class="cbp-l-caption-buttonLeft" rel="nofollow">more info</a>
                            <a href="@item.Src" class="cbp-lightbox cbp-l-caption-buttonRight">view larger</a>
                        </div>
                    </div>
                </div>
            </div>
            <a href="@url" class="cbp-l-grid-masonry-projects-title" rel="nofollow">@item.Title</a>
            <div class="cbp-l-grid-masonry-projects-desc">@categoryNames</div>
        </div> 
    }
</div>




@using (Html.BeginScripts())
{
    <script>
        (function ($, window, document, undefined) {
            'use strict'; 
            $('#js-grid-masonry-projects').cubeportfolio({
                filters: '#js-filters-masonry-projects',
                layoutMode: 'grid',
                defaultFilter: '*',
                animationType: 'quicksand',
                gapHorizontal: @Model.UIProps.GapHorizontal,
                gapVertical: @Model.UIProps.GapVertical,
                gridAdjustment: 'responsive',
                mediaQueries: [{
                    width: 1500,
                    cols: @Model.UIProps.ColumnCount,
                }, {
                    width: 1100,
                    cols: @Model.UIProps.ColumnCount,
                }, {
                    width: 800,
                    cols: @(Model.UIProps.ColumnCount - 1)
                }, {
                    width: 480,
                    cols: @(Model.UIProps.ColumnCount - 2),
                    options: {
                        caption: '',
                        gapHorizontal: 25,
                        gapVertical: 10,
                    }
                }],
                caption: 'zoom',
                displayType: 'fadeIn',
                displayTypeSpeed: 100,

                // lightbox
                lightboxDelegate: '.cbp-lightbox',
                lightboxGallery: true,
                lightboxTitleSrc: 'data-title',
                lightboxCounter: '<div class="cbp-popup-lightbox-counter">{{current}} of {{total}}</div>'
            });
        })(jQuery, window, document);
    </script>
}




@if (!Model.UIProps.ShowPaginations)
{
    return;
}

@{
    var actionName = string.Empty;
    var routeValues = HttpContext.Current.Request.RequestContext.RouteData.Values;
    if (routeValues != null)
    {
        if (routeValues.ContainsKey("action"))
        {
            actionName = routeValues["action"].ToString();
        } 
    }
}

@Html.PagedListPager(portfolioItems, page => Url.Action(actionName, "Portfolio", new { page }))